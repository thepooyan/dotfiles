(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)
(defcfg
  process-unmapped-keys yes
  delegate-to-first-layer yes
)
(defalias
  caps (multi f24 (tap-hold 150 150 esc (layer-while-held navigation)))
  
  a (multi f24 (tap-hold-release 200 200 a lalt)) 
  s (multi f24 (tap-hold-release 200 200 s lsft))
  d (multi f24 (tap-hold-release 200 200 d lctl))
  f (multi f24 (tap-hold-release 200 200 f lmet))

  j (multi f24 (tap-hold-release 200 200 j lmet))
  k (multi f24 (tap-hold-release 200 200 k lctl))
  l (multi f24 (tap-hold-release 200 200 l lsft))
  ; (multi f24 (tap-hold-release 200 200 ret lalt) )

  g (multi f24 (tap-hold-release 200 200 g (layer-while-held numbers)))
  h (multi f24 (tap-hold-release 200 200 h (layer-while-held numbers)))

  i (multi f24 (tap-hold-release 0 200 i (layer-while-held symbols)))
  r (multi f24 (tap-hold-release 200 200 r (layer-while-held media)) )

  pu (multi f24 (tap-hold-release 200 200 u (layer-while-held persian-emoji)))
  u (multi f24 (tap-hold-release 200 200 u (layer-while-held emoji)))

  p-spc (multi f24 (tap-hold-release 200 200 spc (layer-while-held persian-util)))
  spc (multi f24 (tap-hold-release 200 200 spc (layer-while-held util)))

  switch-eng (multi rctl (layer-switch base-layer))
  switch-per (multi rctl (layer-switch persian))

  numbers (layer-switch numbers)
  base (layer-switch base-layer)
  entr* (multi ret @base)
  spc* (multi spc @base)

  f; (fork ; (unmod ret) (lctrl lalt lmeta lsft))
  f' (fork ' bspc (lctrl lalt lmeta lsft))

  fp (fork S-9 S-0 (lsft))
  fc (fork S-[ S-] (lsft))
  fb (fork [ (unmod ]) (lsft))
  ft (fork S-, . (lsft))

  typing (layer-switch typing)
)

(deflayermap (base-layer)
  ;; Home row
  a @a
  s @s
  d @d
  f @f
  j @j
  k @k
  l @l
  ; @;
  ' bspc

  g @g
  h @h

  i @i
  r @r

  u @u

  ;; Modifiers
  caps @caps
  spc @spc
  esc caps
) 
(deflayer navigation
  lrld  1    2    3    4    5    6    7    8    9    0    C--    C-+    bspc
  tab  del    w    e    f4    t    home    end    pgup    pgdn    p    [    ]    \
  _ @a    @s    lctrl    @f    g    left    down    up    right    tab    f11    @typing
  lsft z    x    c    v    b    f12    m    C-pgup    C-pgdn    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)

(deflayer symbols 
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  S-6  S-8    @ft    '    -    +    S-2    S-'    i    S-4    p    [    ]    \
  _ @fp    @fc    @fb    =    S-7    S-1    S-;    k    lsft    ;    S-5   ret
  ` S-\    S-3    c    S--    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)
(deflayer numbers 
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  6    7    8    9    t    y    u    0    o    p    [    ]    \
  0    1    2    3    4    5    6    7    8    9    ret   bspc    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           @spc*            ralt rmet rctl
)
(deflayer numbersToggle 
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    0    o    p    [    ]    \
  @base 1    2    3    4    5    6    7    8    9    @entr*    bspc    ret
  @base z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           @spc*            ralt rmet rctl
)
(deflayer media
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    volu    voldwn    p    [    ]    \
  caps a    s    d    f    g    prev    pp    mute    next    ret    bspc    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)
(deflayer util
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    C-+    C--    p    [    ]    \
  caps a    s    d    f    g    h    @switch-per    C-S-+    C-S--    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)
(deflayer persian-util
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    C-+    C--    p    [    ]    \
  caps a    s    d    f    g    h    @switch-eng    C-S-+    C-S--    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)

(deflayermap (emoji)

  t (unicode ☹)
  r (unicode 😭)
  e (unicode 🥺)
  w (unicode 🥲)
  q (unicode 😔)
  g (unicode 😂)
  f (unicode 😝)
  d (unicode 😎)
  s (unicode 😁)
  a (unicode 😅)
  b (unicode 🥰)
  v (unicode 😘)
  c (unicode 🙃)
  x (unicode 😋)
  z (unicode 😌)
  caps (multi (unicode 👉) (unicode 👈))
  lalt (unicode 💔)
  spc (unicode ❤)
  o (unicode 💀)
  i (unicode 🤦)
  tab (unicode 😐)
  lsft (unicode 👍)
  lctrl (unicode 🖐)
  lmeta (unicode 🙏)

)
(deflayermap (persian-emoji)
 
  t (macro rctl (unicode ☹) rctl)
  r (macro rctl (unicode 😭) rctl)
  e (macro rctl (unicode 🥺) rctl)
  w (macro rctl (unicode 🥲) rctl)
  q (macro rctl (unicode 😔) rctl)
  g (macro rctl (unicode 😂) rctl)
  f (macro rctl (unicode 😝) rctl)
  d (macro rctl (unicode 😎) rctl)
  s (macro rctl (unicode 😁) rctl)
  a (macro rctl (unicode 😅) rctl)
  b (macro rctl (unicode 🥰) rctl)
  v (macro rctl (unicode 😘) rctl)
  c (macro rctl (unicode 🙃) rctl)
  x (macro rctl (unicode 😋) rctl)
  z (macro rctl (unicode 😌) rctl)
  caps (macro rctl (unicode 👈) (unicode 👉) 5 rctl)
  lalt (macro rctl (unicode 💔) rctl)
  spc (macro rctl (unicode ❤) rctl)
  o (macro rctl (unicode 💀) rctl)
  i (macro rctl (unicode 🤦) rctl)
  tab (macro rctl (unicode 😐) rctl)
  lsft (macro rctl (unicode 👍) rctl)
  lctrl (macro rctl (unicode 🖐) rctl)
  lmeta (macro rctl (unicode 🙏) rctl)

)

(deflayermap (persian)
  spc @p-spc
  u @pu
  ; @f;
  ' @f'
)
(deflayer typing
  _  1    2    3    4    5    6    7    8    9    0    -    =    _
  _  q    w    e    r    t    y    u    i    o    p    [    ]    \
  _ a    s    d    f    g    h    j    k    l    _    _    @base
  _ z    x    c    v    b    n    m    ,    .    /    _
  _ _ _           _            _ _ _
)
